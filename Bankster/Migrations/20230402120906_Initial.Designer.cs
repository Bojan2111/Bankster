// <auto-generated />
using System;
using Bankster.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bankster.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230402120906_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bankster.Models.Banka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Kod")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sediste")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Banke");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Kod = 105,
                            Naziv = "AIK BANKA, AD",
                            Sediste = "NIŠ"
                        },
                        new
                        {
                            Id = 2,
                            Kod = 115,
                            Naziv = "TELENOR BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 3,
                            Kod = 125,
                            Naziv = "PIRAEUS BANK, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 4,
                            Kod = 145,
                            Naziv = "MARFIN BANK, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 5,
                            Kod = 150,
                            Naziv = "KBM BANKA, AD",
                            Sediste = "KRAGUJEVAC"
                        },
                        new
                        {
                            Id = 6,
                            Kod = 155,
                            Naziv = "ČAČANSKA BANKA, AD",
                            Sediste = "ČAČAK"
                        },
                        new
                        {
                            Id = 7,
                            Kod = 160,
                            Naziv = "BANCA INTESA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 8,
                            Kod = 165,
                            Naziv = "HYPO ALPE – ADRIA – BANK, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 9,
                            Kod = 170,
                            Naziv = "UNICREDIT BANK SRBIJA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 10,
                            Kod = 180,
                            Naziv = "ALPHA BANK SRBIJA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 11,
                            Kod = 190,
                            Naziv = "JUBMES BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 12,
                            Kod = 200,
                            Naziv = "BANKA POŠTANSKA ŠTEDIONICA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 13,
                            Kod = 205,
                            Naziv = "KOMERCIJALNA BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 14,
                            Kod = 220,
                            Naziv = "PROCREDIT BANK, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 15,
                            Kod = 240,
                            Naziv = "FINDOMESTIC BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 16,
                            Kod = 250,
                            Naziv = "EUROBANK, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 17,
                            Kod = 265,
                            Naziv = "RAIFFEISEN BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 18,
                            Kod = 275,
                            Naziv = "SOCIETE GENERALE BANKA SRBIJA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 19,
                            Kod = 285,
                            Naziv = "SBERBANK SRBIJA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 20,
                            Kod = 295,
                            Naziv = "SRPSKA BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 21,
                            Kod = 310,
                            Naziv = "NLB BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 22,
                            Kod = 325,
                            Naziv = "OTP BANKA SRBIJA, AD",
                            Sediste = "NOVI SAD"
                        },
                        new
                        {
                            Id = 23,
                            Kod = 330,
                            Naziv = "RBA SRBIJA, AD",
                            Sediste = "NOVI SAD"
                        },
                        new
                        {
                            Id = 24,
                            Kod = 340,
                            Naziv = "ERSTE BANK, AD",
                            Sediste = "NOVI SAD"
                        },
                        new
                        {
                            Id = 25,
                            Kod = 355,
                            Naziv = "VOJVOĐANSKA BANKA, AD",
                            Sediste = "NOVI SAD"
                        },
                        new
                        {
                            Id = 26,
                            Kod = 360,
                            Naziv = "DUNAV BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 27,
                            Kod = 365,
                            Naziv = "JUGOBANKA JUGBANKA, AD, KOSOVSKA MITROVICA",
                            Sediste = ""
                        },
                        new
                        {
                            Id = 28,
                            Kod = 370,
                            Naziv = "OPPORTUNITY BANKA, AD",
                            Sediste = "NOVI SAD"
                        },
                        new
                        {
                            Id = 29,
                            Kod = 375,
                            Naziv = "VTB BANKA, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 30,
                            Kod = 380,
                            Naziv = "MIRABANK, AD",
                            Sediste = "BEOGRAD"
                        },
                        new
                        {
                            Id = 31,
                            Kod = 908,
                            Naziv = "NARODNA BANKA SRBIJE",
                            Sediste = "BEOGRAD"
                        });
                });

            modelBuilder.Entity("Bankster.Models.Klijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PolId")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Rodjenje")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PolId");

                    b.ToTable("Klijenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ime = "Bojan",
                            PolId = 1,
                            Prezime = "Adzic",
                            Rodjenje = new DateTime(1981, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Ime = "Pera",
                            PolId = 1,
                            Prezime = "Peric",
                            Rodjenje = new DateTime(1976, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Ime = "Petra",
                            PolId = 2,
                            Prezime = "Petric",
                            Rodjenje = new DateTime(1964, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Ime = "Vanja",
                            PolId = 3,
                            Prezime = "Bulic",
                            Rodjenje = new DateTime(2000, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Ime = "Jelena",
                            PolId = 2,
                            Prezime = "Jelic",
                            Rodjenje = new DateTime(1998, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Bankster.Models.Pol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Forma")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Polovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Forma = "G-din",
                            Naziv = "Muski"
                        },
                        new
                        {
                            Id = 2,
                            Forma = "G-dja",
                            Naziv = "Zenski"
                        },
                        new
                        {
                            Id = 3,
                            Forma = "G-din/G-dja",
                            Naziv = "Neizjasnjen"
                        });
                });

            modelBuilder.Entity("Bankster.Models.Racun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankaId")
                        .HasColumnType("int");

                    b.Property<string>("Broj")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<int>("KontrolniBroj")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipRacunaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankaId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("TipRacunaId");

                    b.ToTable("Racuni");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankaId = 8,
                            Broj = "0000034567143",
                            KlijentId = 1,
                            KontrolniBroj = 97,
                            Saldo = 34584.58m,
                            TipRacunaId = 1
                        },
                        new
                        {
                            Id = 2,
                            BankaId = 21,
                            Broj = "1030506040743",
                            KlijentId = 4,
                            KontrolniBroj = 57,
                            Saldo = 86344.22m,
                            TipRacunaId = 1
                        },
                        new
                        {
                            Id = 3,
                            BankaId = 25,
                            Broj = "1400560700343",
                            KlijentId = 1,
                            KontrolniBroj = 22,
                            Saldo = 13584.58m,
                            TipRacunaId = 2
                        },
                        new
                        {
                            Id = 4,
                            BankaId = 15,
                            Broj = "5671003400043",
                            KlijentId = 2,
                            KontrolniBroj = 54,
                            Saldo = 4584.39m,
                            TipRacunaId = 2
                        },
                        new
                        {
                            Id = 5,
                            BankaId = 13,
                            Broj = "0500670013443",
                            KlijentId = 3,
                            KontrolniBroj = 79,
                            Saldo = 131984.38m,
                            TipRacunaId = 4
                        });
                });

            modelBuilder.Entity("Bankster.Models.TipRacuna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoviRacuna");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tip = "Tekuci"
                        },
                        new
                        {
                            Id = 2,
                            Tip = "Devizni"
                        },
                        new
                        {
                            Id = 3,
                            Tip = "Kreditni"
                        },
                        new
                        {
                            Id = 4,
                            Tip = "Stedni"
                        });
                });

            modelBuilder.Entity("Bankster.Models.Transakcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hitno")
                        .HasColumnType("bit");

                    b.Property<decimal>("Iznos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrimalacRacunId")
                        .HasColumnType("int");

                    b.Property<int>("UplatilacRacunId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrimalacRacunId");

                    b.HasIndex("UplatilacRacunId");

                    b.ToTable("Transakcije");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2022, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hitno = false,
                            Iznos = 2139.38m,
                            PrimalacRacunId = 3,
                            UplatilacRacunId = 1
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2022, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hitno = false,
                            Iznos = 3912.29m,
                            PrimalacRacunId = 2,
                            UplatilacRacunId = 5
                        },
                        new
                        {
                            Id = 3,
                            Datum = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hitno = false,
                            Iznos = 1239.88m,
                            PrimalacRacunId = 1,
                            UplatilacRacunId = 4
                        },
                        new
                        {
                            Id = 4,
                            Datum = new DateTime(2023, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hitno = false,
                            Iznos = 2319.17m,
                            PrimalacRacunId = 5,
                            UplatilacRacunId = 3
                        },
                        new
                        {
                            Id = 5,
                            Datum = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hitno = false,
                            Iznos = 3192.01m,
                            PrimalacRacunId = 4,
                            UplatilacRacunId = 2
                        });
                });

            modelBuilder.Entity("FinalniTest.Models.Login.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bankster.Models.Klijent", b =>
                {
                    b.HasOne("Bankster.Models.Pol", "Pol")
                        .WithMany()
                        .HasForeignKey("PolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pol");
                });

            modelBuilder.Entity("Bankster.Models.Racun", b =>
                {
                    b.HasOne("Bankster.Models.Banka", "Banka")
                        .WithMany()
                        .HasForeignKey("BankaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bankster.Models.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bankster.Models.TipRacuna", "TipRacuna")
                        .WithMany()
                        .HasForeignKey("TipRacunaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banka");

                    b.Navigation("Klijent");

                    b.Navigation("TipRacuna");
                });

            modelBuilder.Entity("Bankster.Models.Transakcija", b =>
                {
                    b.HasOne("Bankster.Models.Racun", "PrimalacRacun")
                        .WithMany()
                        .HasForeignKey("PrimalacRacunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bankster.Models.Racun", "UplatilacRacun")
                        .WithMany()
                        .HasForeignKey("UplatilacRacunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimalacRacun");

                    b.Navigation("UplatilacRacun");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalniTest.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalniTest.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalniTest.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalniTest.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
